#!/usr/bin/env python3
"""
Directory Generator Script (Stage 1)
Creates optimized project scaffold, copies existing training and inference scripts,
and writes module documentation in README.md
"""
import os
import shutil
import argparse

MODULE_DIRS = [
    'configs',
    'grc',
    'scripts',
    os.path.join('src', 'data'),
    os.path.join('src', 'models'),
    os.path.join('src', 'training'),
    os.path.join('src', 'deployment'),
]
COPY_MAP = {
    'trainer.py': os.path.join('src', 'training', 'trainer.py'),
    'trainer_with_jam.py': os.path.join('src', 'training', 'trainer_with_jam.py'),
    'modulation_inference_flowgraph.py': os.path.join('src', 'deployment', 'modulation_inference_flowgraph.py'),
}

README_CONTENT = """
# RFML Project Scaffold

This repository is structured for a modular RFML research and deployment stack:

- configs: Configuration files for data, model, and training pipelines
- grc: GNU Radio Companion flowgraph templates
- scripts: Utility scripts for dataset generation, training, and inference
- src/data: Dataset definitions and streaming utilities
- src/models: Model architectures (MultiTaskCNN, etc.)
- src/training: Training routines and CLI entrypoints
- src/deployment: Inference scripts and deployment-ready modules

Generated by `generate_scaffold.py`.
"""


def create_dirs(root):
    for d in MODULE_DIRS:
        path = os.path.join(root, d)
        os.makedirs(path, exist_ok=True)
        print(f"Created directory: {path}")


def copy_scripts(root):
    for src, dst in COPY_MAP.items():
        src_path = os.path.join(root, src)
        dst_path = os.path.join(root, dst)
        if os.path.isfile(src_path):
            dst_dir = os.path.dirname(dst_path)
            os.makedirs(dst_dir, exist_ok=True)
            shutil.copy2(src_path, dst_path)
            print(f"Copied {src_path} -> {dst_path}")
        else:
            print(f"Warning: {src_path} not found, skipping copy.")


def write_readme(root):
    readme_path = os.path.join(root, 'README.md')
    if os.path.exists(readme_path):
        print(f"README.md already exists at {readme_path}, skipping write.")
        return
    with open(readme_path, 'w') as f:
        f.write(README_CONTENT)
    print(f"Created README.md at {readme_path}")


def main():
    parser = argparse.ArgumentParser(
        description="Generate project scaffold for RFML research and deployment stack."
    )
    parser.add_argument(
        '--root', default='.', help='Root folder path for the project scaffold'
    )
    args = parser.parse_args()
    root = args.root

    print("Starting scaffold generation...")
    create_dirs(root)
    copy_scripts(root)
    write_readme(root)
    print("Scaffold generation complete.")


if __name__ == '__main__':
    main()
