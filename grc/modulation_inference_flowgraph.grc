options:
  parameters:
    author: Nick Redmond
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: modulation_inference_flowgraph
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ML_Radio_Project
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: excess_bw
  id: variable
  parameters:
    comment: ''
    value: '0.35'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 20.0]
    rotation: 0
    state: enabled
- name: mod_type
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 20.0]
    rotation: 0
    state: enabled
- name: prediction
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: ''
    label: 'Prediction:'
    type: string
    value: N/A
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 20.0]
    rotation: 0
    state: enabled
- name: samp_per_sym
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 20.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 20.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '100000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: byte
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 292.0]
    rotation: 0
    state: enabled
- name: blocks_selector_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    input_index: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    num_outputs: '2'
    output_index: '0'
    showports: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 204.0]
    rotation: 0
    state: disabled
- name: digital_constellation_modulator_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    differential: 'True'
    excess_bw: excess_bw
    log: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: samp_per_sym
    truncate: 'False'
    verbose: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 116.0]
    rotation: 0
    state: enabled
- name: digital_constellation_modulator_3
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_qpsk().base()
    differential: 'True'
    excess_bw: excess_bw
    log: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: samp_per_sym
    truncate: 'False'
    verbose: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 244.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nimport torch\nfrom gnuradio import gr\n\nclass\
      \ blk(gr.sync_block):\n    def __init__(self):\n        gr.sync_block.__init__(self,\n\
      \            name=\"LiveClassifier\",\n            in_sig=[np.complex64],\n\
      \            out_sig=None)\n        self.device = torch.device('cuda' if torch.cuda.is_available()\
      \ else 'cpu')\n        self.model = torch.jit.load('/home/jackthelion83/ML_Radio_Project/multitask_cnn.pt',\
      \ map_location=self.device)\n        self.model.eval()\n\n    def work(self,\
      \ input_items, output_items):\n        in0 = input_items[0]\n\n        if len(in0)\
      \ >= 1024:\n            # Step 1: Take first 1024 samples\n            signal\
      \ = in0[:1024]\n\n            # Step 2: Convert complex to two real-valued channels\
      \ (I/Q)\n            iq = np.stack((np.real(signal), np.imag(signal)), axis=0)\
      \  # shape: [2, 1024]\n\n            # Step 3: Move to tensor\n            iq_tensor\
      \ = torch.tensor(iq, dtype=torch.float32).unsqueeze(0)  # [1, 2, 1024]\n\n \
      \           # Step 4: Move input to same device as model\n            iq_tensor\
      \ = iq_tensor.to(self.device)\n\n            # Step 5: Inference\n         \
      \   with torch.no_grad():\n                output = self.model(iq_tensor)\n\n\
      \                # Assuming output is a NamedTuple or dict with 'mod' key for\
      \ modulation logits\n                if isinstance(output, dict) or hasattr(output,\
      \ 'mod'):\n                    mod_logits = output['mod'] if isinstance(output,\
      \ dict) else output.mod\n                else:\n                    # If output\
      \ is tuple/list, modulation output is first element\n                    mod_logits\
      \ = output[0]\n\n                pred = mod_logits.argmax(dim=1).item()  # get\
      \ scalar predicted class index\n\n            print(f\"\U0001F9E0 Detected Modulation\
      \ Class: {pred}\")\n\n        return len(in0)\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('LiveClassifier', 'blk', [], [('0', 'complex', 1)], [], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 160.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', digital_constellation_modulator_0, '0']
- [analog_sig_source_x_0, '0', digital_constellation_modulator_3, '0']
- [blocks_selector_0, '0', epy_block_0, '0']
- [digital_constellation_modulator_0, '0', blocks_selector_0, '0']
- [digital_constellation_modulator_0, '0', epy_block_0, '0']
- [digital_constellation_modulator_3, '0', epy_block_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
